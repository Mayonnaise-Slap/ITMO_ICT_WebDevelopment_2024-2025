{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u00b6 \u0412\u0435\u0431 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0418\u041a\u0422 2024 \u0421\u0430\u043c\u0441\u043e\u043d\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 web 3.2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u00b6 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","title":"Home"},{"location":"#_1","text":"\u0412\u0435\u0431 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0418\u041a\u0422 2024 \u0421\u0430\u043c\u0441\u043e\u043d\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 web 3.2","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"},{"location":"#1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"Lab_1/task_1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u00b6 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u00b6 \u0421\u0435\u0440\u0432\u0435\u0440 \u00b6 from datetime import datetime # for logging from socket import socket, AF_INET, SOCK_DGRAM def udp_server(server_address: tuple[str, int] = ('localhost', 12345)): server_socket = socket(AF_INET, SOCK_DGRAM) server_socket.bind(server_address) # set up the socket print(f\"Server is up and listening on {server_address}\") while True: try: # main loop message, client_address = server_socket.recvfrom(1024) print(f\"Received message from {client_address} at {datetime.now().time()}: {message.decode()}\") response = b\"Hello client!\\n\" server_socket.sendto(response, client_address) except KeyboardInterrupt: server_socket.close() break if __name__ == \"__main__\": udp_server() \u041a\u043b\u0438\u0435\u043d\u0442 \u00b6 from socket import socket, AF_INET, SOCK_DGRAM def udp_client(server_address: tuple[str, int] = ('localhost', 12345)): client_socket = socket(AF_INET, SOCK_DGRAM) try: # 1 try without validation message = b\"Hello server\\n\" print(f\"Sending: {message}\") client_socket.sendto(message, server_address) response, _ = client_socket.recvfrom(1024) print(f\"Received: {response.decode()}\") finally: client_socket.close() if __name__ == \"__main__\": udp_client() \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u00b6 \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f UDP \u043f\u0440\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 socket \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f SOCK_DGRAM. UDP \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u043a\u0435\u0442\u044b","title":"Task 1"},{"location":"Lab_1/task_1/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"Lab_1/task_1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"Lab_1/task_1/#_2","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"Lab_1/task_1/#_3","text":"from datetime import datetime # for logging from socket import socket, AF_INET, SOCK_DGRAM def udp_server(server_address: tuple[str, int] = ('localhost', 12345)): server_socket = socket(AF_INET, SOCK_DGRAM) server_socket.bind(server_address) # set up the socket print(f\"Server is up and listening on {server_address}\") while True: try: # main loop message, client_address = server_socket.recvfrom(1024) print(f\"Received message from {client_address} at {datetime.now().time()}: {message.decode()}\") response = b\"Hello client!\\n\" server_socket.sendto(response, client_address) except KeyboardInterrupt: server_socket.close() break if __name__ == \"__main__\": udp_server()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"Lab_1/task_1/#_4","text":"from socket import socket, AF_INET, SOCK_DGRAM def udp_client(server_address: tuple[str, int] = ('localhost', 12345)): client_socket = socket(AF_INET, SOCK_DGRAM) try: # 1 try without validation message = b\"Hello server\\n\" print(f\"Sending: {message}\") client_socket.sendto(message, server_address) response, _ = client_socket.recvfrom(1024) print(f\"Received: {response.decode()}\") finally: client_socket.close() if __name__ == \"__main__\": udp_client()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"Lab_1/task_1/#_5","text":"\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f UDP \u043f\u0440\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 socket \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f SOCK_DGRAM. UDP \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f, \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u043a\u0435\u0442\u044b","title":"\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"Lab_1/task_2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u00b6 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u00b6 \u0421\u0435\u0440\u0432\u0435\u0440 \u00b6 import math from socket import socket, AF_INET, SOCK_STREAM from datetime import datetime def solver_server(socket_address: tuple[str, int] = ('localhost', 12345)): server = socket(AF_INET, SOCK_STREAM) server.bind(socket_address) server.listen(5) # socket setup print(f'Started listening on {socket_address}') while True: # main loop try: client_socket, client_address = server.accept() print(f'Connected from {client_address}') message = client_socket.recv(1024).decode('utf-8') print(f'Received message from client: {message}\\nValidating data...') params = validate_data(message) # irrelevant helper function if params: solution = solve_quadratic(*params) # irrelevant helper function print(f'The data is valid\\nsending back to client at {datetime.now().time}: \\n{solution}') client_socket.send(solution.encode('utf-8')) else: # if params are wrong print('The data is invalid') client_socket.send('Invalid parameters, try again.'.encode('utf-8')) except KeyboardInterrupt: print('shutting down') server.close() return if __name__ == '__main__': solver_server() \u041a\u043b\u0438\u0435\u043d\u0442 \u00b6 from socket import socket, AF_INET, SOCK_STREAM def tcp_client(server_address: tuple[str, int] = ('localhost', 12345)): client_socket = socket(AF_INET, SOCK_STREAM) client_socket.connect(server_address) data = input(\"give me the 'a b c' of a quadratic equation for me to solve: \") client_socket.send(data.encode('UTF-8')) print(client_socket.recv(1024).decode('UTF-8')) client_socket.close() if __name__ == \"__main__\": tcp_client() \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u00b6 TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c.","title":"Task 2"},{"location":"Lab_1/task_2/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"Lab_1/task_2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"Lab_1/task_2/#_2","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"Lab_1/task_2/#_3","text":"import math from socket import socket, AF_INET, SOCK_STREAM from datetime import datetime def solver_server(socket_address: tuple[str, int] = ('localhost', 12345)): server = socket(AF_INET, SOCK_STREAM) server.bind(socket_address) server.listen(5) # socket setup print(f'Started listening on {socket_address}') while True: # main loop try: client_socket, client_address = server.accept() print(f'Connected from {client_address}') message = client_socket.recv(1024).decode('utf-8') print(f'Received message from client: {message}\\nValidating data...') params = validate_data(message) # irrelevant helper function if params: solution = solve_quadratic(*params) # irrelevant helper function print(f'The data is valid\\nsending back to client at {datetime.now().time}: \\n{solution}') client_socket.send(solution.encode('utf-8')) else: # if params are wrong print('The data is invalid') client_socket.send('Invalid parameters, try again.'.encode('utf-8')) except KeyboardInterrupt: print('shutting down') server.close() return if __name__ == '__main__': solver_server()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"Lab_1/task_2/#_4","text":"from socket import socket, AF_INET, SOCK_STREAM def tcp_client(server_address: tuple[str, int] = ('localhost', 12345)): client_socket = socket(AF_INET, SOCK_STREAM) client_socket.connect(server_address) data = input(\"give me the 'a b c' of a quadratic equation for me to solve: \") client_socket.send(data.encode('UTF-8')) print(client_socket.recv(1024).decode('UTF-8')) client_socket.close() if __name__ == \"__main__\": tcp_client()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"Lab_1/task_2/#_5","text":"TCP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c.","title":"\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"Lab_1/task_3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u00b6 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u00b6 from socket import socket, AF_INET, SOCK_STREAM def html_server(socket_address: tuple[str, int] = ('localhost', 12345)): server = socket(AF_INET, SOCK_STREAM) server.bind(socket_address) server.listen(5) print(f'Started listening on {socket_address}') print(f'to see the result, go to http://{socket_address[0]}:{socket_address[1]}') standard_headers = [ 'HTTP/1.1 200 OK\\r\\n', 'Content-Type: text/html; charset=utf-8\\r\\n', '\\r\\n' ] while True: try: with open('index.html', 'r') as f: html = f.read() client_socket, client_address = server.accept() print(f'Connected from {client_address}') client_socket.recv(1024) client_socket.send(encode_args(*standard_headers, *html)) # helper function except KeyboardInterrupt: print('shutting down') server.close() return if __name__ == '__main__': html_server() \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u00b6 \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 \u0441 \u043f\u0440\u043e\u0441\u0442\u044b\u043c tcp \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\u043c, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c http header'\u044b, \u0447\u0442\u043e\u0431\u044b \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043b html","title":"Task 3"},{"location":"Lab_1/task_3/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"Lab_1/task_3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"Lab_1/task_3/#_2","text":"from socket import socket, AF_INET, SOCK_STREAM def html_server(socket_address: tuple[str, int] = ('localhost', 12345)): server = socket(AF_INET, SOCK_STREAM) server.bind(socket_address) server.listen(5) print(f'Started listening on {socket_address}') print(f'to see the result, go to http://{socket_address[0]}:{socket_address[1]}') standard_headers = [ 'HTTP/1.1 200 OK\\r\\n', 'Content-Type: text/html; charset=utf-8\\r\\n', '\\r\\n' ] while True: try: with open('index.html', 'r') as f: html = f.read() client_socket, client_address = server.accept() print(f'Connected from {client_address}') client_socket.recv(1024) client_socket.send(encode_args(*standard_headers, *html)) # helper function except KeyboardInterrupt: print('shutting down') server.close() return if __name__ == '__main__': html_server()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"Lab_1/task_3/#_3","text":"\u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 \u0441 \u043f\u0440\u043e\u0441\u0442\u044b\u043c tcp \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\u043c, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c http header'\u044b, \u0447\u0442\u043e\u0431\u044b \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u043b html","title":"\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"Lab_1/task_4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u00b6 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u00b6 \u0421\u0435\u0440\u0432\u0435\u0440 \u00b6 import socket import threading clients = {} clients_lock = threading.Lock() def broadcast(message, current_client): for client in clients.keys(): if current_client is None: output = f'system: {message}' elif client != current_client: output = f'{clients[current_client]}: {message}' else: continue with clients_lock: client.send(output.encode()) def handle_client(client_socket): name = client_socket.recv(1024).decode() with clients_lock: clients[client_socket] = name welcome_message = f\"{name} has joined the chat!\" broadcast(welcome_message, current_client=None) try: while True: message = client_socket.recv(1024).decode() if message: broadcast(message, current_client=client_socket) else: break finally: with clients_lock: del clients[client_socket] client_socket.close() broadcast(f\"{name} has left the chat.\", current_client=None) def start_server(socket_address: tuple[str, int] = ('localhost', 12345)): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(socket_address) server.listen() print(f'Server listening on {':'.join(map(str, socket_address))}...') while True: try: client_socket, client_address = server.accept() print(f\"New connection from {client_address}\") thread = threading.Thread(target=handle_client, args=(client_socket,)) thread.start() except KeyboardInterrupt: server.close() break if __name__ == \"__main__\": start_server() \u041a\u043b\u0438\u0435\u043d\u0442 \u00b6 import socket import threading is_active = True def receive_messages(client_socket): global is_active while is_active: try: message = client_socket.recv(1024).decode() if message: print(message) else: break except ConnectionResetError or KeyboardInterrupt: is_active = False def send_messages(client_socket): global is_active while is_active: try: message = input() if message in ('', 'quit', 'exit'): is_active = False client_socket.send(message.encode('utf-8')) except ConnectionResetError or KeyboardInterrupt: is_active = False def start_client(socket_address: tuple[str, int] = ('localhost', 12345)): name = input('Enter your name: ') client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(socket_address) client_socket.send(name.encode('utf-8')) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() send_thread = threading.Thread(target=send_messages, args=(client_socket,)) send_thread.start() receive_thread.join() send_thread.join() if __name__ == \"__main__\": try: start_client() except: pass \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u00b6 \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 2 \u043f\u043e\u0442\u043e\u043a\u0430: \u043d\u0430 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u0434\u0430\u0447\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043e\u0431\u0449\u0443\u044e \"\u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\" (\u0441\u043b\u043e\u0432\u0430\u0440\u044c {connection: name}) \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0449\u043e\u0432\u0430\u043b \u043c\u044e\u0442\u0435\u043a\u0441 lock, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0435\u0433\u043e \u0434\u0432\u0443\u043c\u044f \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u00b6 3 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0431\u0449\u0430\u044e\u0442\u0441\u044f \u00b6 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u00b6 \u0412\u0438\u0434 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u00b6","title":"Task 4"},{"location":"Lab_1/task_4/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"Lab_1/task_4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"Lab_1/task_4/#_2","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"Lab_1/task_4/#_3","text":"import socket import threading clients = {} clients_lock = threading.Lock() def broadcast(message, current_client): for client in clients.keys(): if current_client is None: output = f'system: {message}' elif client != current_client: output = f'{clients[current_client]}: {message}' else: continue with clients_lock: client.send(output.encode()) def handle_client(client_socket): name = client_socket.recv(1024).decode() with clients_lock: clients[client_socket] = name welcome_message = f\"{name} has joined the chat!\" broadcast(welcome_message, current_client=None) try: while True: message = client_socket.recv(1024).decode() if message: broadcast(message, current_client=client_socket) else: break finally: with clients_lock: del clients[client_socket] client_socket.close() broadcast(f\"{name} has left the chat.\", current_client=None) def start_server(socket_address: tuple[str, int] = ('localhost', 12345)): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(socket_address) server.listen() print(f'Server listening on {':'.join(map(str, socket_address))}...') while True: try: client_socket, client_address = server.accept() print(f\"New connection from {client_address}\") thread = threading.Thread(target=handle_client, args=(client_socket,)) thread.start() except KeyboardInterrupt: server.close() break if __name__ == \"__main__\": start_server()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"Lab_1/task_4/#_4","text":"import socket import threading is_active = True def receive_messages(client_socket): global is_active while is_active: try: message = client_socket.recv(1024).decode() if message: print(message) else: break except ConnectionResetError or KeyboardInterrupt: is_active = False def send_messages(client_socket): global is_active while is_active: try: message = input() if message in ('', 'quit', 'exit'): is_active = False client_socket.send(message.encode('utf-8')) except ConnectionResetError or KeyboardInterrupt: is_active = False def start_client(socket_address: tuple[str, int] = ('localhost', 12345)): name = input('Enter your name: ') client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(socket_address) client_socket.send(name.encode('utf-8')) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() send_thread = threading.Thread(target=send_messages, args=(client_socket,)) send_thread.start() receive_thread.join() send_thread.join() if __name__ == \"__main__\": try: start_client() except: pass","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"Lab_1/task_4/#_5","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 2 \u043f\u043e\u0442\u043e\u043a\u0430: \u043d\u0430 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u0434\u0430\u0447\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043e\u0431\u0449\u0443\u044e \"\u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\" (\u0441\u043b\u043e\u0432\u0430\u0440\u044c {connection: name}) \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0449\u043e\u0432\u0430\u043b \u043c\u044e\u0442\u0435\u043a\u0441 lock, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0435\u0433\u043e \u0434\u0432\u0443\u043c\u044f \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438","title":"\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"Lab_1/task_4/#_6","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"Lab_1/task_4/#3","text":"","title":"3 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0431\u0449\u0430\u044e\u0442\u0441\u044f"},{"location":"Lab_1/task_4/#1","text":"","title":"1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f"},{"location":"Lab_1/task_4/#_7","text":"","title":"\u0412\u0438\u0434 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"Lab_1/task_5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u00b6 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u00b6 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u00b6 \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0430\u0440\u0441\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 html \u0438 \u043e\u0442\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u0421\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442: - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 - \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u00b6 \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u00b6 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 \u00b6 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u00b6","title":"Task 5"},{"location":"Lab_1/task_5/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"Lab_1/task_5/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"Lab_1/task_5/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0430\u0440\u0441\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 html \u0438 \u043e\u0442\u0434\u0430\u0435\u0442 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u0421\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442: - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 - \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438","title":"\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"Lab_1/task_5/#_3","text":"","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"Lab_1/task_5/#_4","text":"","title":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"Lab_1/task_5/#_5","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438"},{"location":"Lab_1/task_5/#_6","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f"}]}